--- 
wordpress_id: 107
layout: post
title: Einstieg in Brownfield-Projekte
wordpress_url: http://blog.kopis.de/?p=107
---

    <p>Da ich mich gerade mitten in einem sog. <a href="http://en.wikipedia.org/wiki/Brownfield_(software_development)">Brownfield-Projekt</a> befinde, d.h. einem Projekt mit haupts&auml;chlich gewachsener Architektur, mit fehlender Testabdeckung, mit manuellem Build- und Deploymentprozess und mit hohem manuellen Test- und &Auml;nderungsaufwand, will ich hier meine Erfahrungen schildern und einen Weg aufzeigen, wie man in solche Projekte einsteigen kann.  Auf <a href="http://www.heise.de/developer/">heise developer</a> gibt es gerade <a href="http://www.heise.de/developer/artikel/Clean-Code-Developer-in-Brownfield-Projekten-855114.html">eine Artikelserie zum Thema Brownfield</a>, die von den beiden <a href="http://www.clean-code-developer.de/">Clean Code</a> Initiatoren <a href="http://www.lieser-online.de/blog/">Stefan Lieser</a> und <a href="http://www.ralfw.de/">Ralf Westphal</a> verfasst wird. Und nachdem ich den Artikel gelesen habe, habe ich festgestellt, dass ich genau der dort beschriebenen Vorgehensweise folge. :-)</p>
<p><strong>Der Buildprozess</strong></p>
<p><strong></strong> Der erste Schritt f&uuml;r mich war das Verstehen des Buildprozess. Ohne einen funktionieren Buildprozess hat man als Entwickler keine M&ouml;glichkeit, &uuml;berhaupt einen Fehler in seinem Code festzustellen, der das fehlerfreie &Uuml;bersetzen der Software verhindert. Als allererstes muss man also (nach dem Einrichten des <a href="http://de.wikipedia.org/wiki/Versionsverwaltung">VCS</a> nat&uuml;rlich) die Software bauen - m&ouml;glichst in einem einzigen Schritt. Ein Merkmal von Brownfield-Projekten ist aber gerade, dass der Buildprozess manuell, kompliziert und fehleranf&auml;llig ist. Es gilt also herauszufinden, wie der Ablauf aussieht, wo evtl. festverdrahtete Pfadnamen im Spiel sind, wo die Ergebnisse abgelegt werden und was in welchem Schritt weiterverwendet wird.  Anschliessend habe ich angefangen, die weit verstreuten Verzeichnisse mit Ergebnissen in Form von JAR, WAR und EAR-Dateien zusammenzuf&uuml;hren und in einem Verzeichnis abzulegen, dass ich auch in meinem Eclipse-Workspace sehen konnte. So habe ich direkt nach dem Build das Ergebnis gesehen und konnte die &Auml;nderungen und neu erstellten Dateien mitverfolgen.</p>
<p><strong>Testautomatisierung</strong></p>
<p><strong></strong> Der zweite Schritt ist eigentlich kein Schritt, sondern ein Prozess. In Brownfield-Projekten sind automatisierte Tests so gut wie nicht vorhanden. Weder Unit- noch Integrationstests werden regelm&auml;ssig und automatisiert ausgef&uuml;hrt. Daher sind &Auml;nderungen mit einem hohen Risiko verbunden und als Entwickler neige ich dazu, &Auml;nderungen so klein wie m&ouml;glich zu halten und es ist immer eine latente Furcht mit &Auml;nderungen verbunden. Wer wei&szlig; schon so genau, was man alles kaputt macht. Der Code ist in den Jahren so weit verrottet, dass man keine M&ouml;glichkeit hat, alle Seiteneffekte und Auswirkungen der &Auml;nderung zu &uuml;berblicken.  Also besteht der zweite Schritt in der stetigen Erstellung von automatisierten Tests. Vor jeder &Auml;nderung versuche ich Unit Tests zu schreiben, die eine Dokumentation des aktuellen Verhaltens sein sollen. Anschliessend kann ich &Auml;nderungen am Code vornehmen, und die unver&auml;nderte Funktion durch meine Tests &uuml;berpr&uuml;fen. Leider ist es im Brownfield-Projekt sehr schwer, auf Unit-Ebene Tests zu schreiben, da es sehr viele innere Abh&auml;ngigkeiten zwischen den Softwaremodulen gibt. Die Tests sind daher eher Integrationstests, aber durch intensives <a href="http://de.wikipedia.org/wiki/Mock-Objekt">Mocking</a> (mit <a href="http://code.google.com/p/jmockit/">meinem Lieblingsmockframework JMockIt</a>) versuche ich die Abh&auml;ngigkeiten so niedrig wie m&ouml;glich zu halten. Das gelingt manchmal gut, manchmal schlecht. Es ist nicht immer m&ouml;glich, gute Tests zu schreiben - aber es ist immer m&ouml;glich, &uuml;berhaupt Tests zu schreiben.</p>
<p><strong>Automatisierter Build</strong></p>
<p><strong></strong> Als n&auml;chsten Schritt nehme ich mir den automatisierten Build vor, der auch die Ausf&uuml;hrung der automatisierten Tests enth&auml;lt. Dazu muss der Buildprozess angepasst werden, in meinem Fall also einige neue Targets in die <a href="http://ant.apache.org/">Ant-Skripte</a> eingef&uuml;gt werden. Das ganze werde ich erstmal auf meinem Rechner machen, aber fr&uuml;her oder sp&auml;ter sollte der gesamte Build auf einem dedizierten Rechner ausgef&uuml;hrt werden. Es gibt bereits zu viele Umgebungsvariablen, zu viele Bibliotheken, die auf den Entwicklungsrechner installiert und eingerichtet werden m&uuml;ssen, damit der Build l&auml;uft. Egal, ob der Build auf einem (beliebigen) Entwicklerrechner oder auf einem eigenen Buildrechner erfolgt, er muss immer mit einem einzigen Klick zu starten sein.  Alle manuellen Schritte m&uuml;ssen eliminiert werden, alle vor- oder nachbereitenden T&auml;tigkeiten m&uuml;ssen automatisiert werden. Erst wenn jeder Mitarbeiter einen Build erstellen kann, ist schluss. Dann verliert der Vorgang seinen Schrecken und muss nicht immer vom selben "<em>Buildbeauftragten</em>" ausgef&uuml;hrt werden.</p>
<p><strong>Continuous Integration</strong></p>
<p><strong></strong> Der n&auml;chste logische Schritt ist dann die Einf&uuml;hrung von <a href="http://de.wikipedia.org/wiki/Kontinuierliche_Integration">Continuous Integration</a>, wahrscheinlich mit <a href="http://hudson-ci.org/">Hudson</a>. Damit soll bei jeder &Auml;nderung im VCS ein Build ausgel&ouml;st werden, so dass auch die Notwendigkeit von "<em>Build-Tagen</em>" entf&auml;llt. Ausserdem muss man nicht mehr einen Entwickler mit der Erstellung von Builds bel&auml;stigen, wenn er eigentlich etwas besseres zu tun h&auml;tte... ;-) Und schliesslich geh&ouml;rt zur <em>CI</em> auch die Festlegung von Orten, wo die Ergebnisse erwartet werden. Jeder wei&szlig; dann, wo die letzte Version liegt. Und jeder kann sich dort bedienen.</p>
<p><strong>Continuous Deployment</strong></p>
<p><strong></strong> Das w&auml;re die Kr&ouml;nung. Automatisches Deployment auf alle Umgebungen. Aber bis dahin ist der Weg noch so weit, dass ich mich erst sp&auml;ter damit besch&auml;ftige.</p>
  
